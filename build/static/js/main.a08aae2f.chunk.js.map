{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendPricePusher","data","axios","post","prices","then","response","console","log","catch","error","state","btcAmount","ethAmount","ltcAmount","pusher","Pusher","cluster","encrypted","subscribe","_this2","navigator","onLine","setState","btcprice","localStorage","getItem","ethprice","ltcprice","setInterval","get","bind","price","BTC","USD","setItem","ETH","LTC","_this$state","react_default","a","createElement","className","PureComponent","History","getETHPrices","date","getBTCPrices","getLTCPrices","getTodayPrice","historyList","t","moment","unix","all","spread","eth","btc","ltc","push","format","toConsumableArray","getYesterdayPrice","subtract","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","length","map","historyData","index","key","App","href","target","rel","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a08aae2f.chunk.js","sourcesContent":["/**\n * Created by Nikita Mittal\n * 28th Nov 2018\n */\n\nimport React, { PureComponent } from 'react'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n//import css\nimport './Today.css'\n\nclass Today extends PureComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            btcAmount: '',\n            ethAmount: '',\n            ltcAmount: ''\n        }\n    }\n\n    componentWillMount(){\n        // establish a connection to Pusher\n    this.pusher = new Pusher('6abcd4a00181368360ec', {\n        cluster: 'ap2',\n        encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe('coin-prices');\n        // axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n        //         .then(response => {\n        //             // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n        //             //console.log(\"API calling success\", response)\n        //             this.setState({ btcAmount: response.data.BTC.USD });\n        //             this.setState({ ethAmount: response.data.ETH.USD });\n        //             this.setState({ ltcAmount: response.data.LTC.USD });\n        //         })\n        //         // Catch any error here\n        //         .catch(error => {\n        //             console.log(error)\n        //         })\n    }\n\n    sendPricePusher =  (data) => {\n        axios.post('/prices/new', {\n            prices: data\n        })\n          .then(response => {\n              console.log(response)\n          })\n          .catch(error => {\n              console.log(error)\n          })\n     }\n\n     componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ btcprice: localStorage.getItem('BTC') });\n            this.setState({ ethprice: localStorage.getItem('ETH') });\n            this.setState({ ltcprice: localStorage.getItem('LTC') });\n        }\n        setInterval(() => {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n                .then(response => {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }, 10000)\n        this.prices.bind('prices', price => {\n            this.setState({ btcAmount: price.prices.BTC.USD });\n            localStorage.setItem('BTC', price.prices.BTC.USD);\n            this.setState({ ethAmount: price.prices.ETH.USD });\n            localStorage.setItem('ETH', price.prices.ETH.USD);\n            this.setState({ ltcAmount: price.prices.LTC.USD });\n            localStorage.setItem('LTC', price.prices.LTC.USD);\n          }, this);\n     }\n\n\n    render() {\n        const {btcAmount, ethAmount, ltcAmount} = this.state;\n        return (\n            <div className=\"today-container\">\n                <div className=\"today-btc-container\">\n                    <div className=\"today-btc-data-container\">\n                        <div className=\"today-amount-container\">${btcAmount}</div>\n                        <div className=\"today-unit-container\"> 1 BTC</div>\n                    </div>\n                </div>\n                <div className=\"today-eth-container\">\n                    <div className=\"today-eth-data-container\">\n                        <div className=\"today-amount-container\">${ethAmount}</div>\n                        <div className=\"today-unit-container\"> 1 ETH</div>\n                    </div>\n\n                </div>\n                <div className=\"today-ltc-container\">\n                    <div className=\"today-ltc-data-container\">\n                        <div className=\"today-amount-container\">${ltcAmount}</div>\n                        <div className=\"today-unit-container\"> 1 LTC</div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Today","/**\n * Created by Nikita Mittal\n * 28th Nov 2018\n */\n\nimport React, { PureComponent } from 'react';\nimport moment from 'moment'\nimport map from 'lodash/map'\nimport axios from 'axios';\n\n//import css\nimport './History.css';\n\nclass History extends PureComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            historyList : []\n        }\n    }\n\n    getETHPrices = (date) => {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\n    }\n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n    getBTCPrices = (date) => {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\n    }\n    // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n    getLTCPrices = (date) => {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\n    }\n\n\n    // This function gets the prices for the current date.\n    getTodayPrice = () => {\n        const {historyList} = this.state;\n        let t = moment().unix()\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                historyList.push({\n                    date: moment().format(\"DD MMM YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                })\n                this.setState({\n                    historyList: [...historyList]\n                })\n                \n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice = () => {\n        const {historyList} = this.state;\n        let t = moment().subtract(1, 'days').unix();\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                historyList.push({\n                    date: moment().subtract(1, 'days').format(\"DD MMM YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                })\n                this.setState({\n                    historyList: [...historyList]\n                })\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice = () => {\n        let t = moment().subtract(2, 'days').unix();\n        const {historyList} = this.state\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                historyList.push({\n                    date: moment().subtract(2, 'days').format(\"DD MMM YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                })\n                this.setState({\n                    historyList: [...historyList]\n                })\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice = () => {\n        const {historyList} = this.state\n        let t = moment().subtract(3, 'days').unix();\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                historyList.push({\n                    date: moment().subtract(3, 'days').format(\"DD MMM YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                })\n                this.setState({\n                    historyList: [...historyList]\n                })\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice = () => {\n        const {historyList} = this.state;\n        let t = moment().subtract(4, 'days').unix();\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                historyList.push({\n                    date: moment().subtract(4, 'days').format(\"DD MMM YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                })\n                this.setState({\n                    historyList: [...historyList]\n                })\n            }));\n    }\n    componentWillMount() {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n    render() {\n        const {historyList} = this.state;\n        console.log(\"History LIst\", historyList);\n        return (\n            <div className=\"history-container\">\n            {historyList && historyList.length && map(historyList, (historyData, index) => {\n                return (\n                    <div key={index} className=\"history-date-data-container\">\n                    <div className=\"history-btc-container\">\n                        <div className=\"history-date-container\">{historyData.date}</div>\n                        <div className=\"history-data-container\">1 BTC = ${historyData.btc}</div>\n                    </div>\n                    <div className=\"history-eth-container\">\n                        <div>1 ETH = ${historyData.eth}</div>\n                    </div>\n                    <div className=\"history-ltc-container\">\n                        <div>1 LTC = ${historyData.ltc}</div>\n                    </div>\n                  </div>\n                )\n\n            })}\n              \n            </div>\n        )\n    }\n}\n\nexport default History\n\n","import React, { PureComponent } from 'react';\nimport './App.css';\n\n//Custom Import \nimport Today from './Today';\nimport History from './History';\n\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"top-header\">\n        <div className=\"top-header-name\">Pusher Coins</div>\n        <div className=\"top-header-link\">\n          <a className=\"top-header-link-name\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n        </div>\n        </div>\n        <div className=\"page-content-container\">\n          {/* <div className=\"sidebar\">\n          <div className=\"side-bar-data\">\n            Side bar data\n          </div>\n          </div> */}\n          <div className=\"main-content\">\n          <div className=\"main-content-data\">\n          <div className=\"main-content-heading\">\n            PusherCoins is a realtime price information about <br/>\n            BTC, ETH and LTC\n          </div>\n          <div className=\"current-price-text\">Current price</div>\n           <Today/>\n           <div className=\"history-text\">History (Past 5 days)</div>\n           <History/>\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register(config) {\n // console.log(\"Service register getting called\")\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker();\n"],"sourceRoot":""}